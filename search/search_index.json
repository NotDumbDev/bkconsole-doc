{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-bkconsole","title":"What is BKConsole?","text":"<p>BKConsole is a lightweight and customizable command bar module designed for quick and efficient command execution through an  interface. It allows you to run commands easily and create your own custom commands</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Lightweight and easy to integrate</li> <li>Custom command support</li> <li>Argument parsing with type checking</li> <li>Autocompletion and descriptions</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install BKConsole from this link</p> <p>After downloading, drag the 'Packages' folder into your project workspace. If necessary, you can rename the folder.</p> <p></p> <p>Info</p> <ul> <li>Make sure you put BKConsole under ServerScriptService.</li> <li>Do not unpack the folder.</li> </ul>"},{"location":"API/","title":"API","text":""},{"location":"API/#init","title":".init()","text":"<p>Description</p> <p>Initializes BKConsole.</p> <p>Paramater</p> <p>Admins: {number}</p> <p>Returns</p> <p>\"Success\" \"Fail\" \"Wrong_context\"</p>"},{"location":"API/#usage","title":"Usage:","text":"<pre><code>local admins = {\n    134567890\n}\n\nBKConsole.init(admins)\n</code></pre>"},{"location":"API/#setactivationkey","title":".setActivationKey()","text":"<p>Description</p> <p>Sets the Open or Close key for BKConsole.</p> <p>Paramater</p> <p>activationKey: string? | Enum.Keycode?</p>"},{"location":"API/#usage_1","title":"Usage:","text":"<pre><code>BKConsole.setActivationKey(\"F2\")\n--or\nBKConsole.setActivationKey(Enum.Keycode.F2)\n</code></pre>"},{"location":"API/#registercommand","title":".registerCommand()","text":"<p>Description</p> <p>Registers a command.</p> <p>Paramater</p> <p>commandName: string</p> <p>description: string</p> <p>arguments: {}? <code>OPTIONAL</code></p> <p>callback: (any) -&gt; () </p> <p>onRanMessage: string <code>OPTIONAL</code></p>"},{"location":"API/#usage_2","title":"Usage:","text":"<pre><code>local arguments = {\n    [\"kick\"] = {\n        { name = \"kickPlayer\", type = \"string\" },\n        { name = \"reason\", type = \"string\" },\n    }\n}\n\nBKConsole.registerCommand(\"Kick\", \"Kicks a player.\", arguments[\"kick\"], function(player: Player, kickPlayer: string, reason: string) \n    local target = Players:FindFirstChild(kickPlayer)\n    if target then\n        target:Kick(reason)\n    end\nend, \"Successfully kicked player.\")\n</code></pre>"},{"location":"API/#runcommand","title":".runCommand()","text":"<p>Description</p> <p>Runs a registered command.</p> <p>Paramater</p> <p>commandName: string</p> <p>arguments: {}?</p> <p>player: Player</p> <p>Returns</p> <p>\"Success\" \"Fail\" \"Unknown\"</p>"},{"location":"API/#usage_3","title":"Usage:","text":"<pre><code>BKConsole.runCommand(\"Kick\", {\"Roblox\", \"Broke RP Rule Nr3201 Paragraph 2.\"}, player)\n</code></pre>"},{"location":"Getting%20Started/","title":"Getting Started","text":""},{"location":"Getting%20Started/#setup","title":"Setup","text":"<p>Once you've downloaded BKConsole, follow the steps below to get it to work:</p> <ol> <li>Create a Script under <code>ServerScriptService</code>.</li> <li>Require the BKConsole module.</li> <li>Initialize BKConsole using <code>BKConsole.init(admins)</code>, where <code>admins</code> is a table of user IDs for users allowed to access BKConsole.</li> </ol>"},{"location":"Getting%20Started/#example-setup","title":"Example Setup","text":"<pre><code>local Players = game:GetService(\"Players\")\nlocal BKConsole = require(path.to.bkconsole)\n\n-- User IDs of players who can use BKConsole\nlocal admins = {\n    1234567890\n}\n\nPlayers.PlayerAdded:Connect(function(player: Player)\n    -- Wait for the player's character to load\n    player.CharacterAdded:Connect(function()\n        BKConsole.init(admins)\n    end)\nend)\n</code></pre> <p>Note</p> <p>Replace path.to.bkconsole with the actual path to your BKConsole module.</p> <p>Info</p> <p>The init function returns either \"Success\" or \"Fail\". if you want, you can bind these to additional functions, for example: registering the commands after the init is done.</p>"},{"location":"Getting%20Started/#setting-an-activation-key","title":"Setting an activation key","text":"<p>To open or close BKConsole, you need to bind an activation key. This key can either be an <code>Enum.KeyCode</code> or a <code>string</code>.</p> Using Enum.KeycodeUsing a String <pre><code>    Players.PlayerAdded:Connect(function(player: Player)\n        player.CharacterAdded:Connect(function()\n            BKConsole.init(admins)\n            BKConsole.setActivationKey(Enum.Keycode.F2) -- With Enum.Keycode\n        end)\n    end)\n</code></pre> <pre><code>    Players.PlayerAdded:Connect(function(player: Player)\n        player.CharacterAdded:Connect(function()\n            BKConsole.init(admins)\n            BKConsole.setActivationKey(\"F2\") -- With a String\n        end)\n    end)\n</code></pre> <p>Info</p> <p>When using a string, make sure the case matches exactly with the corresponding Enum name.</p> <ul> <li>BKConsole.setActivationKey(\"f2\") - Incorrect </li> <li>BKConsole.setActivationKey(\"F2\") - Correct </li> </ul> <p>You can update the activation key at any time during runtime.</p>"},{"location":"Getting%20Started/#registering-a-command","title":"Registering a command","text":"<p>BKConsole comes with a few built-in commands, but they might not cover all your needs. To create custom commands, use the BKConsole.registerCommand() function.</p>"},{"location":"Getting%20Started/#commad-example","title":"Commad Example","text":"<pre><code>local Players = game:GetService(\"Players\")\n\n-- Define expected arguments for autocomplete and type checking\nlocal arguments = {\n    [\"kick\"] = {\n        { name = \"kickPlayer\", type = \"string\" },\n        { name = \"reason\", type = \"string\" },\n    }\n}\n\nBKConsole.registerCommand(\"Kick\", \"Kicks a player.\", arguments[\"kick\"], function(player: Player, kickPlayer: string, reason: string) \n    -- player must ALWAYS be the first argument in the function.\n    local target = Players:FindFirstChild(kickPlayer)\n    if target then\n        target:Kick(reason)\n    end\nend, \"Successfully kicked player.\")\n</code></pre> <p>Click here to learn the registerCommand function more in depth.</p> <p>Info</p> <p>If you want autocomplete support, you must provide a table of argument definitions. This tells BKConsole what argument types to expect. If you don't need autocomplete, you can pass nil instead.</p>"},{"location":"Getting%20Started/#running-a-command-using-a-script","title":"Running a command using a script","text":"<p>Info</p> <p>You can also run commands via a script and its fairly easy. To run a command using a script, use BKConsole.runCommand() and pass the required paramaters.</p>"},{"location":"Getting%20Started/#usage-example","title":"Usage Example","text":"<pre><code>BKConsole.runCommand(\"Kick\", {\"Roblox\", \"Broke RP Rule Nr3201 Paragraph 2.\"}, player)\n</code></pre> <p>Click here to learn the runCommand function more in depth.</p>"},{"location":"Support/","title":"Support","text":""},{"location":"Support/#support","title":"Support","text":"<p>Tip</p> <p>You need support or found a bug? Then add <code>@euro_fighter.</code> on discord!  I will answer all of your questions and help you out with figuring out the Library!</p> <p>Bug</p> <p>If you found a bug about BKConsole, make an issue on the github page.</p> <p>Click Here for the issues page.</p>"}]}